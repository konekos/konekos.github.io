I"Fu<p>项目使用 Tomcat8，某服务经常会重启后所有接口报错，WARN 日志如下：com.caucho.hessian.io.SerializerFactory.getDeserializer Hessian/Burlap:’XxDTO’ is an unknown class in null:java.lang.ClassNotFoundException: ‘XxDTO’，Http 接口经过统一异常处理后打印的 message 为 java.lang.ClassCastException: java.util.HashMap cannot be cast to ‘XxDTO’。</p>

<h2 id="1-问题解决过程">1. 问题解决过程</h2>

<p>找到 WARNING 日志位置，com.caucho.hessian.io.SerializerFactory，hessian 版本为 4.0.38：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializerFactory</span> <span class="kd">extends</span> <span class="nc">AbstractSerializerFactory</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nc">Deserializer</span> <span class="nf">getDeserializer</span><span class="o">(</span><span class="nc">String</span> <span class="n">type</span><span class="o">){</span>
    	<span class="c1">//...</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="nc">Class</span> <span class="n">cl</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">_loader</span><span class="o">);</span>
        <span class="n">deserializer</span> <span class="o">=</span> <span class="n">getDeserializer</span><span class="o">(</span><span class="n">cl</span><span class="o">);</span>
      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">warning</span><span class="o">(</span><span class="s">"Hessian/Burlap: '"</span> <span class="o">+</span> <span class="n">type</span> <span class="o">+</span> <span class="s">"' is an unknown class in "</span> <span class="o">+</span> <span class="n">_loader</span> <span class="o">+</span> <span class="s">":\n"</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
        <span class="n">_typeNotFoundDeserializerMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="no">PRESENT</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="nc">Level</span><span class="o">.</span><span class="na">FINER</span><span class="o">,</span> <span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
        <span class="n">_unrecognizedTypeCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="k">new</span> <span class="nc">AtomicLong</span><span class="o">(</span><span class="mi">1L</span><span class="o">));</span>
      <span class="o">}</span>
    	<span class="c1">//...</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>type 是 String 类型，该类的全限定名，通过 _loader 加载该类，由于抛出的异常为 ClassNotFoundException，只会是因为 _loader 为空导致。</p>

<p>接下来看 SerializerFactory 中类加载器 _loader 的赋值，可以看到是在实例化时传入的 ContextClassLoader。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializerFactory</span> <span class="kd">extends</span> <span class="nc">AbstractSerializerFactory</span> <span class="o">{</span>	
  	<span class="kd">public</span> <span class="nf">SerializerFactory</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">SerializerFactory</span><span class="o">(</span><span class="nc">ClassLoader</span> <span class="n">loader</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">_loader</span> <span class="o">=</span> <span class="n">loader</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>ContextClassLoader 可以手动 set 赋值，如果不手动调用，它的值会从哪来呢？</p>

<p>可以从 Thread 初始化代码得知：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Thread</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="nc">ThreadGroup</span> <span class="n">g</span><span class="o">,</span> <span class="nc">Runnable</span> <span class="n">target</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span>
                          <span class="kt">long</span> <span class="n">stackSize</span><span class="o">,</span> <span class="nc">AccessControlContext</span> <span class="n">acc</span><span class="o">,</span>
                          <span class="kt">boolean</span> <span class="n">inheritThreadLocals</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">//...</span>
            <span class="nc">Thread</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">currentThread</span><span class="o">();</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">security</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">isCCLOverridden</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">getClass</span><span class="o">()))</span>
                <span class="k">this</span><span class="o">.</span><span class="na">contextClassLoader</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">getContextClassLoader</span><span class="o">();</span>
            <span class="k">else</span>
                <span class="k">this</span><span class="o">.</span><span class="na">contextClassLoader</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">contextClassLoader</span><span class="o">;</span>
            <span class="c1">//...</span>
        <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div></div>

<p>可以看出 ContextClassLoader 是继承的父线程的。正常来说 ContextClassLoader 不应该为空，接下来就要通过 DEBUG 来找到实例化 SerializerFactory 的线程。</p>

<p>虽然问题不是 100% 重启复现，不过还是 DEBUG 到出问题的时候实例化线程名为 ForkJoinPool.commonPool-worker-xxx，是 ForkJoinPool 中的 ForkJoin线程。</p>

<p>这时如果对 Java8 较为熟悉，就应该知道默认使用 ForkJoinPool 的有 parallelStream 以及 CompletableFuture，则可以结合 SerializerFactory 的实例化时机与搜索这两个符号在业务代码的使用从而找到导致出现问题的业务代码的位置。</p>

<p>由于项目中的 redis 使用 hessian 做了一层序列化与反序列化的封装，所以调用 RedisService 的 get 操作时，会进行 SerializerFactory 的实例化。且由于该服务的所有接口要过登录拦截器，该拦截器中会有 reids get 操作，而所有接口不可用就是因为在拦截器中抛出了java.lang.ClassCastException: java.util.HashMap cannot be cast to ‘XxDTO’ 的异常。因此 SerializerFactory 在 Spring 容器启动完毕之前就已经实例化了，通过排查最终发现导致问题的代码，示例如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">class</span> <span class="nc">SomeService</span> <span class="o">{</span>

  <span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">RedisService</span> <span class="n">redisService</span><span class="o">;</span>

  <span class="nd">@PostConstruct</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(){</span>
    <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getB</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">b</span><span class="o">){</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getList</span><span class="o">();</span>
      <span class="n">list</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span><span class="o">-&gt;{</span>
        <span class="n">redisService</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="c1">//...</span>
      <span class="o">});</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>项目中 redis 的 hessian 封装里，SerializerFactory 是作为单例使用的。可以看到通过 @PostConstruct 注解，在并行流里进行了 redis set 操作，set 操作需要获取序列化器，导致了 SerializerFactory 预先实例化且获取的 ContextClassLoader 为空。 之后在拦截器中 RedisService 调用get 方法，通过 SerializerFactory 获取反序列化器时，由于 ClassLoader 为空，则默认使用了 Map 类型的反序列化器（有兴趣可以看下 hessian 源码），而 Redis 中存的反序列化后的对象并不是 Map 类型，所以抛出转换异常。而且有 if 判断条件，导致不能每次重启都能复现。</p>

<p>最终取消使用并行流，问题解决。</p>

<h2 id="2-问题思考">2. 问题思考</h2>

<p>为什么 ForkJoinPool 中的线程获取 ContextClassLoader 为空？首先看一下 ForkJoinPool 的源码。</p>

<p>普通线程池（ThreadPoolExecutor）的线程都是由 ThreadFactory 创建的，ForkJoinPool 也是如此，为其内部类 DefaultForkJoinWorkerThreadFactory。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">DefaultForkJoinWorkerThreadFactory</span>
  <span class="kd">implements</span> <span class="nc">ForkJoinWorkerThreadFactory</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">final</span> <span class="nc">ForkJoinWorkerThread</span> <span class="nf">newThread</span><span class="o">(</span><span class="nc">ForkJoinPool</span> <span class="n">pool</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ForkJoinWorkerThread</span><span class="o">(</span><span class="n">pool</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建的线程为 ForkJoinWorkerThread，调用了 Thread 的构造器，执行了 init，所以也是继承的父线程的（new 出这个类实例的线程）的类加载器。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForkJoinWorkerThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
		<span class="kd">protected</span> <span class="nf">ForkJoinWorkerThread</span><span class="o">(</span><span class="nc">ForkJoinPool</span> <span class="n">pool</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Use a placeholder until a useful name can be set in registerWorker</span>
        <span class="kd">super</span><span class="o">(</span><span class="s">"aForkJoinWorkerThread"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pool</span> <span class="o">=</span> <span class="n">pool</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">workQueue</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="na">registerWorker</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
  
</code></pre></div></div>

<p>那为什么为空呢？</p>

<h2 id="3-问题根源">3. 问题根源</h2>

<p>最后还是通过搜索得知原来是 Tomcat 替换了 ForkJoinPool 的 DefaultForkJoinWorkerThreadFactory 导致，目的是为了解决内存泄露的问题。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ForkJoinPool</span><span class="o">{</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="nc">ForkJoinPool</span> <span class="nf">makeCommonPool</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">parallelism</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="nc">ForkJoinWorkerThreadFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nc">UncaughtExceptionHandler</span> <span class="n">handler</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>  <span class="c1">// ignore exceptions in accessing/parsing properties</span>
        <span class="nc">String</span> <span class="n">pp</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span>
            <span class="o">(</span><span class="s">"java.util.concurrent.ForkJoinPool.common.parallelism"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">fp</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span>
            <span class="o">(</span><span class="s">"java.util.concurrent.ForkJoinPool.common.threadFactory"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">hp</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span>
            <span class="o">(</span><span class="s">"java.util.concurrent.ForkJoinPool.common.exceptionHandler"</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">pp</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">parallelism</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">pp</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">fp</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">factory</span> <span class="o">=</span> <span class="o">((</span><span class="nc">ForkJoinWorkerThreadFactory</span><span class="o">)</span><span class="nc">ClassLoader</span><span class="o">.</span>
                       <span class="nf">getSystemClassLoader</span><span class="o">().</span><span class="na">loadClass</span><span class="o">(</span><span class="n">fp</span><span class="o">).</span><span class="na">newInstance</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hp</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">handler</span> <span class="o">=</span> <span class="o">((</span><span class="nc">UncaughtExceptionHandler</span><span class="o">)</span><span class="nc">ClassLoader</span><span class="o">.</span>
                       <span class="nf">getSystemClassLoader</span><span class="o">().</span><span class="na">loadClass</span><span class="o">(</span><span class="n">hp</span><span class="o">).</span><span class="na">newInstance</span><span class="o">());</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ignore</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">factory</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">getSecurityManager</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="n">factory</span> <span class="o">=</span> <span class="n">defaultForkJoinWorkerThreadFactory</span><span class="o">;</span>
        <span class="k">else</span> <span class="c1">// use security-managed default</span>
            <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InnocuousForkJoinWorkerThreadFactory</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">parallelism</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="c1">// default 1 less than #cores</span>
        <span class="o">(</span><span class="n">parallelism</span> <span class="o">=</span> <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
        <span class="n">parallelism</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">parallelism</span> <span class="o">&gt;</span> <span class="no">MAX_CAP</span><span class="o">)</span>
        <span class="n">parallelism</span> <span class="o">=</span> <span class="no">MAX_CAP</span><span class="o">;</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ForkJoinPool</span><span class="o">(</span><span class="n">parallelism</span><span class="o">,</span> <span class="n">factory</span><span class="o">,</span> <span class="n">handler</span><span class="o">,</span> <span class="no">LIFO_QUEUE</span><span class="o">,</span>
                            <span class="s">"ForkJoinPool.commonPool-worker-"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>Tomcat 通过修改系统属性 <code class="language-plaintext highlighter-rouge">java.util.concurrent.ForkJoinPool.common.threadFactory</code> 替换了线程工厂。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SafeForkJoinWorkerThreadFactory</span> <span class="kd">implements</span> <span class="nc">ForkJoinWorkerThreadFactory</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ForkJoinWorkerThread</span> <span class="nf">newThread</span><span class="o">(</span><span class="nc">ForkJoinPool</span> <span class="n">pool</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">SafeForkJoinWorkerThread</span><span class="o">(</span><span class="n">pool</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">SafeForkJoinWorkerThread</span> <span class="kd">extends</span> <span class="nc">ForkJoinWorkerThread</span> <span class="o">{</span>

        <span class="kd">protected</span> <span class="nf">SafeForkJoinWorkerThread</span><span class="o">(</span><span class="nc">ForkJoinPool</span> <span class="n">pool</span><span class="o">)</span> <span class="o">{</span>
            <span class="kd">super</span><span class="o">(</span><span class="n">pool</span><span class="o">);</span>
            <span class="n">setContextClassLoader</span><span class="o">(</span><span class="nc">ForkJoinPool</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>该类将创建出的 SafeForkJoinWorkerThread 线程的 ContextClassLoader 设为 ForkJoinPool 类的 ClassLoader，而 ForkJoinPool 是 java.util.concurrent 包里的类，在 rt.jar 里，根据双亲委托机制，该类由 BootStrapClassLoader 加载的，而此类加载器是纯 C++ 实现，没有具体的 Java Class，所以获取的 ClassLoader 实例 为 null。</p>

<h2 id="4-类加载相关">4. 类加载相关</h2>

<p>在 Thread 中，ContextClassLoader 是其成员变量。ForkJoin 线程池中创建的线程，与普通线程池类似，也会有持续存在的核心线程不会销毁。这样ForkJoinPool 中的线程就持有从父线程继承的 ClassLoader 的强引用。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* The context ClassLoader for this thread */</span>
<span class="kd">private</span> <span class="nc">ClassLoader</span> <span class="n">contextClassLoader</span><span class="o">;</span>
</code></pre></div></div>

<p>而 ForkJoinPool 本身由 static 实例化，在整个 JVM 存活周期不会被销毁：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">final</span> <span class="nc">ForkJoinPool</span> <span class="n">common</span><span class="o">;</span>
</code></pre></div></div>

<p>先复习一下类加载相关知识：</p>

<p>ClassLoader 内会存放所加载类的引用，Class 也会引用其 ClassLoader，通过调用 getClassLoader() 获取。Class 与 ClassLoader 是双向关联关系。</p>

<p>Java 自带的类加载器有 Bootstrap，Ext，与 App ClassLoader 三种，这3个 ClassLoader 被 JVM 内部强引用，不会被回收，因此这三种类加载器所加载的 Class 在 JVM 存活时不会被回收。</p>

<p>自定义类加载器所加载的类是可以被卸载的，如图所示，当 SampleObj 的类加载器与 SampleObj 所有的实例对象不再被引用，那么其 Class 也将不在被 root 引用，从而触发卸载类的卸载。</p>

<p>，<img src="/assets/img/classloader.png" alt="classloader" /></p>

<p>Tomcat 的自定义类加载器为 ParallelWebappClassLoader，其生命周期等同 Tomcat 的生命周期。当 ForkJoinPool 中的线程持有对 ParallelWebappClassLoader 的引用时，会导致 ParallelWebappClassLoader 与其加载的类无法被回收。</p>

<p>那么什么时候会发生 ParallelWebappClassLoader 的 ClassLoader 的卸载呢，可能是 Tomcat 里的 webapp 重启的时候 ？？？暂时先不考虑那么多，如果以后碰到 Tomcat 下 metaspace 区类溢出的问题，也许可以提供一种思路。</p>

<h2 id="5-springboot-下的测试">5. SpringBoot 下的测试</h2>

<p>经在 SpringBoot 2.3.2（tomcat-embed-core 9.0.37）测试，代码如下，在并行流下获取的  ContextClassLoader 并不是 null，而是 TomcatEmbeddedWebappClassLoader。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestController</span> <span class="o">{</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/test"</span><span class="o">)</span>
    <span class="nd">@ResponseBody</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ExecutionException</span><span class="o">,</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">supplyAsync</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">ClassLoader</span><span class="o">.</span><span class="na">getSystemClassLoader</span><span class="o">());</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}).</span><span class="na">get</span><span class="o">();</span>
        <span class="k">return</span> <span class="s">"ok"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Result:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Thread</span><span class="o">[</span><span class="nc">ForkJoinPool</span><span class="o">.</span><span class="na">commonPool</span><span class="o">-</span><span class="n">worker</span><span class="o">-</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="n">main</span><span class="o">]</span>
<span class="nc">TomcatEmbeddedWebappClassLoader</span>
  <span class="nl">context:</span> <span class="no">ROOT</span>
  <span class="nl">delegate:</span> <span class="kc">true</span>
<span class="o">----------&gt;</span> <span class="nc">Parent</span> <span class="nl">Classloader:</span>
<span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Launcher</span><span class="n">$AppClassLoader</span><span class="err">@</span><span class="mi">18</span><span class="n">b4aac2</span>

<span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Launcher</span><span class="n">$AppClassLoader</span><span class="err">@</span><span class="mi">18</span><span class="n">b4aac2</span>
</code></pre></div></div>

<p>也就是说没有再使用 SafeForkJoinWorkerThreadFactory，而是直接从父线程继承的。</p>

<p>又用最早的 SpringBoot 1.0.0 版本试了下，发现获取的 ContextClassLoader 也是 Tomcat 7 的 WebappClassLoader。</p>

<p>为什么 SpringBoot 下没有再使用 SafeForkJoinWorkerThreadFactory 呢，个人猜测和 JVM 的生命周期有关。以 Tomcat 的方式启动 web 应用时，会有Tomcat 本身不停止，只重启其中的 web 应用的操作，而 ForkJoinPool 的生命周期是依附于 JVM 的，这样会导致类无法卸载的问题。而 SpringBoot 的重启是整个 JVM 的重启，不会有类似问题。</p>

<p>⚠️：以上只是个人猜想可能不对🐶。</p>

<h2 id="6-总结">6. 总结</h2>

<p>本次遇到的问题还是有不少收获的，特别是问题不能 100% 复现，对 DEBUG 造成不小的麻烦，前期只能靠猜。最终终于 DEBUG 到一次线程名，看到是 ForkJoin 线程就豁然开朗了。</p>

<p>随后找到问题发生的根源，并对类加载机制 以及 ContextClassLoader 有了进一层的理解。最后在 SpringBoot 下测试相同的问题，并给出了猜想。</p>

<p>最后还是要多学习啊，基础要牢🐶。</p>

:ET